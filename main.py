import sqlite3
from telebot import TeleBot, types
import time
from telegram.ext import Updater, CommandHandler, MessageHandler, ConversationHandler
import telegram.ext.filters as filters
# from user_save_profiles import *

from datetime import datetime, date

BOT_TOKEN = '7702064015:AAHkpI7E_xTuo4Wvn7VVp4kNQAObNCS8JH4'
bot = TeleBot(BOT_TOKEN)

def create_users_table():
    with sqlite3.connect('bot_users.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                phone_number TEXT,
                first_name TEXT,
                last_name TEXT,
                school TEXT,
                teacher_name TEXT,
                age INTEGER,
                tickets INTEGER DEFAULT 0,
                last_day_activity DATE,
                free_tickets INTEGER DEFAULT 0,
                post_tickets INTEGER DEFAULT 0,
                montion_tickets INTEGER DEFAULT 0    
            )
        ''')
        conn.commit()


# _____________________________________

def save_user_data(user_id, username, phone_number, first_name, last_name, school, teacher_name, age):
    with sqlite3.connect('bot_users.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, phone_number, first_name, last_name, school, teacher_name, age, tickets, free_tickets, post_tickets, montion_tickets)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, 0, 0, 0, 0)
        ''', (user_id, username, phone_number, first_name, last_name, school, teacher_name, age))
        conn.commit()

def create_registration_form(message):
    markup = types.ReplyKeyboardRemove()
    msg = bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç, –ß–µ–º–ø–∏–æ–Ω üèÜ\n" 
        "–ß—Ç–æ–±—ã –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–æ –¥–Ω—é —Ä–æ–∂–¥–µ–Ω–∏—è MAXIMUM –Ω–∞–º –Ω—É–∂–Ω–æ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è üß°ü§ù\n\n" +
        "–ó–∞–ø–æ–ª–Ω–∏ –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª –∏–º—è –±—É–¥—É—â–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ü•∞\n\n" +
        "1. –ò–º—è:\n" +
        "2. –§–∞–º–∏–ª–∏—è:\n" +
        "3. –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –õ–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:\n" +
        "4. –®–∫–æ–ª–∞:\n" +
        "5. –ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è/–∫—É—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–∏–≤—à–µ–≥–æ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:\n" +
        "6. –í–æ–∑—Ä–∞—Å—Ç:\n\n" +
        "–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞—á–∏–Ω–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n" +
        "–ò–≤–∞–Ω\n–ü–µ—Ç—Ä–æ–≤\n+79991234567\n–®–∫–æ–ª–∞ ‚Ññ1\n–ê—Ä—Ç—ë–º –ö–∞—Ä–º–∞–∑\n16",
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, process_registration_form)

def check_user_exists(user_id):
    with sqlite3.connect('bot_users.db') as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
    return user is not None

def process_registration_form(message):
    try:
        if check_user_exists(message.from_user.id):
            user = get_user_by_id(message.from_user.id)
            bot.send_message(
                message.chat.id, 
                f"–ü—Ä–∏–≤–µ—Ç, {user[3]}!"
            )
            return

        data = message.text.split('\n')
        if len(data) != 6:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

        first_name, last_name, phone_number, school, teacher_name, age = data

        markup = types.InlineKeyboardMarkup()
        approve_btn = types.InlineKeyboardButton("–í—Å–µ –≤–µ—Ä–Ω–æ!", callback_data="approve_registration")
        edit_btn = types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_registration")
        markup.row(approve_btn, edit_btn)

        bot.session_data[message.chat.id] = {
            'user_id': message.from_user.id,
            'username': message.from_user.username,
            'first_name': first_name,
            'last_name': last_name,
            'phone_number': phone_number,
            'school': school,
            'teacher_name': teacher_name,
            'age': int(age)
        }

        bot.send_message(
            message.chat.id, 
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n" +
            f"–ò–º—è: {first_name}\n" +
            f"–§–∞–º–∏–ª–∏—è: {last_name}\n" +
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n" +
            f"–®–∫–æ–ª–∞: {school}\n" +
            f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_name}\n" +
            f"–í–æ–∑—Ä–∞—Å—Ç: {age}",
            reply_markup=markup
        )


    except Exception as e:
        bot.send_message(
            message.chat.id, 
            f"–í–≤–æ–¥–∏ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫–∂–µ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ! \n –ê –≤–æ–∑—Ä–∞—Å—Ç –≤–≤–æ–¥–∏ —á–∏—Å–ª–æ–º! \n ÔººÔºà„Äá_ÔΩèÔºâÔºè"
        )
        create_registration_form(message)

def get_user_by_username(username):
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE username = ?', (username,))
    user = cursor.fetchone()
    conn.close()
    return user

def get_user_by_id(user_id):
    with sqlite3.connect('bot_users.db') as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
    return user

@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_registration') or call.data.startswith('edit_registration'))
def handle_registration_callback(call):
    if check_user_exists(call.from_user.id):
        start(call.message)
        return
    if call.data == 'approve_registration':
        user_data = bot.session_data.get(call.message.chat.id, {})
        save_user_data(
            user_data['user_id'],
            user_data['username'], 
            user_data['phone_number'], 
            user_data['first_name'], 
            user_data['last_name'], 
            user_data['school'], 
            user_data['teacher_name'], 
            user_data['age']
        )
        bot.session_data.pop(call.message.chat.id, None)
        bot.answer_callback_query(call.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        msg = bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ /start")
        bot.register_next_step_handler(msg, start)
    elif call.data == 'edit_registration':
        create_registration_form(call.message)

# ___________________________


def create_main_menu_keyboard():
    # """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        types.KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞"),
        types.KeyboardButton("–ü—Ä–∏–∑—ã")
    )
    markup.row(
        types.KeyboardButton("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç"),
        types.KeyboardButton("–ë–∏–ª–µ—Ç—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    )
    
    markup.row(
        types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å"),
        types.KeyboardButton("–ú–æ–∏ –±–∏–ª–µ—Ç—ã")
    )
    return markup
# _____________________________________
# –ë–ï–°–ü–õ–ê–¢–ù–´–ï –ë–ò–õ–ï–¢–´
# _____________________________________

def get_user_tickets(user_id):
    with sqlite3.connect('bot_users.db') as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT tickets FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        if result is None:
            return None
        return result[0]

def update_user_tickets(user_id, tickets_to_add=1):
    with sqlite3.connect('bot_users.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users 
            SET tickets = tickets + ? 
            WHERE user_id = ?
        ''', (tickets_to_add, user_id))
        conn.commit()

def can_get_free_ticket(user_id):
    with sqlite3.connect('bot_users.db') as conn:
        cursor = conn.cursor()
        today = str(date.today())
        
        cursor.execute('''   
            SELECT last_day_activity, free_tickets	 
            FROM users 
            WHERE user_id = ?
        ''', (user_id,))
        
        result = cursor.fetchone()
        
        if not result:
            return False
        
        last_activity_date, free_tickets_count = result
        
        if last_activity_date is None or last_activity_date != today:
            cursor.execute('''
                UPDATE users 
                SET last_day_activity = ?, 
                    free_tickets = 1    
                WHERE user_id = ?
            ''', (today, user_id))
            conn.commit()
            return True
         
        if free_tickets_count >= 1:
            return False
        
        cursor.execute('''
            UPDATE users 
            SET free_tickets = free_tickets + 1  
            WHERE user_id = ?
        ''', (user_id,))
        conn.commit()
        
    return True


@bot.message_handler(func=lambda message: message.text == "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç")
def free_ticket(message):
    user_id = message.from_user.id
    
    if can_get_free_ticket(user_id):
        update_user_tickets(user_id)
        tickets = get_user_tickets(user_id)
        message_text = """–¢—ã –ø–æ–ª—É—á–∏–ª 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! üí∏
    –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –¥—Ä—É–≥–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ –±–æ–ª—å—à–µ –±–∏–ª–µ—Ç–æ–≤ –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ üòç

    –ó–∞–±–∏—Ä–∞–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–∑ –ø–æ <a href="https://disk.yandex.ru/d/UlCdu7frVeLVFQ">—Å—Å—ã–ª–∫–µ</a>. –ò –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –±–∏–ª–µ—Ç–æ–º"""
        bot.send_message(
            message.chat.id,
            message_text,
            parse_mode='HTML',
            disable_web_page_preview=True
        )       
        # bot.send_message(
        #     message.chat.id, 
        #     f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {tickets} –±–∏–ª–µ—Ç–æ–≤!",
        #     reply_markup=create_main_menu_keyboard()
        # )
    else:
        user = get_user_by_id(message.from_user.id)
        message_text2= """–Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µü•≤ 
–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –±–∏–ª–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—è –¥—Ä—É–∑—å—è–º –æ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä–µ ü´°"""
        bot.send_message(
            message.chat.id, 
            f"{user[3]}, {message_text2}!",
            reply_markup=create_main_menu_keyboard()
        )

@bot.message_handler(func=lambda message: message.text == "–ú–æ–∏ –±–∏–ª–µ—Ç—ã")
def show_tickets(message):
    user_id = message.from_user.id
    tickets = get_user_tickets(user_id)
    
    bot.send_message(
        message.chat.id, 
        f"–£ –≤–∞—Å {tickets} –±–∏–ª–µ—Ç(–æ–≤)!",
        reply_markup=create_main_menu_keyboard()
    )

# _____________________________________
# –ü–†–û–§–ò–õ–¨
# _____________________________________

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å")
def show_profile(message):
    user_id = message.from_user.id
    
    with sqlite3.connect('bot_users.db') as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
    
    profile_text = (
        f"–ü—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {user[3]}\n"
        f"–§–∞–º–∏–ª–∏—è: {user[4]}\n"
        f"–®–∫–æ–ª–∞: {user[5]}\n"
        f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {user[6]}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user[7]}\n"
        f"–ë–∏–ª–µ—Ç—ã: {user[8]}"
    )
    
    bot.send_message(
        message.chat.id, 
        profile_text,
        reply_markup=create_main_menu_keyboard()
    )

# _____________________________________
#  –ü–†–ê–í–ò–õ–ê
# ____________________________________-
@bot.message_handler(func=lambda message: message.text == "–ü—Ä–∞–≤–∏–ª–∞")
def show_rules(message):
    rules_text = """–¢–≤–æ–π –ª—é–±–∏–º—ã–π <b>MAXIMUM</b> –æ—Ç–º–µ—á–∞–µ—Ç 12 –ª–µ—Çüß°
–ú–´ –æ—Ç–º–µ—Ç–∏–º –µ–≥–æ –Ω–∞ "<u>–ù–∞–≤–∏–≥–∞—Ç–æ—Ä–µ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è</u>" –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ (8-9 —Ñ–µ–≤—Ä–∞–ª—è) –∏ –ú–æ—Å–∫–≤–µ (15-16) —Ñ–µ–≤—Ä–∞–ª—è ü•≥ü•≥

–ú—ã –æ—Ç–º–µ—Ç–∏–º –µ–≥–æ –º–∞—Å—à—Ç–∞–±–Ω–æ –∏ –∂–¥–µ–º —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –Ω–∞ –Ω–µ–º. <b>–ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ –î–† —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π?</b> 
–ó–∞ –∫–∞–∂–¥–æ–µ <u>–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</u> –¥—Ä—É–∑–µ–π –Ω–∞ "<u>–ù–∞–≤–∏–≥–∞—Ç–æ—Ä</u>" —Ç—ã –ø–æ–ª—É—á–∏—à—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <u>–±–∏–ª–µ—Ç–æ–≤</u>.

    <b>–ü—Ä–∞–≤–∏–ª–æ 1:</b> –ó–∞ –æ–¥–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–∑! 
–ê —á—Ç–æ–±—ã –ø–æ–±–æ—Ä–æ—Ç—å—Å—è –∑–∞ –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–µ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫) –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –±–æ–ª—å—à–µ –¥–µ–π—Å—Ç–≤–∏–π. –í–µ–¥—å, —á–µ–º –±–æ–ª—å—à–µ –±–∏–ª–µ—Ç–æ–≤, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –≤—ã–∏–≥—Ä–∞—Ç—å üòé
 
    <b>–ü—Ä–∞–≤–∏–ª–æ 2:</b> –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã? –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –æ—Ç–ø—Ä–∞–≤—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:
       1Ô∏è‚É£ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –±–æ—Ç–µ + –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–∑ –∑–∞ —É—á–∞—Å—Ç–∏–µ (–ö–Ω–æ–ø–∫–∞: "<u>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç</u>")
       
       3Ô∏è‚É£  –±–∏–ª–µ—Ç–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Ç—ã —Å –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏/–¥—Ä—É–∑—å—è–º–∏ ("<u>–ë–∏–ª–µ—Ç—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</u>")
 
       5Ô∏è‚É£ –±–∏–ª–µ—Ç–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –≤ —Å–≤–æ–µ–º –¢–ì-–∫–∞–Ω–∞–ª–µ –∏–ª–∏ reels/shorts/tt —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –Ω–∞ "<u>–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è</u>" ("<u>–ë–∏–ª–µ—Ç—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</u>") 

    <b>–ü—Ä–∞–≤–∏–ª–æ 3:</b> –ù–µ —É–¥–∞–ª—è—Ç—å –ø–æ—Å—Ç—ã –∏ —Ä–æ–ª–∏–∫–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ - 14 —Ñ–µ–≤—Ä–∞–ª—è –≤ 16:00 (–ø–æ –º—Å–∫)"""

    bot.send_message(
        message.chat.id, 
        rules_text,
        parse_mode='HTML',
        reply_markup=create_main_menu_keyboard()
    )

# _____________________________________
#  –ü—Ä–∏–∑—ã
# ____________________________________-
@bot.message_handler(func=lambda message: message.text == "–ü—Ä–∏–∑—ã")
def show_prizes(message):
    prizes_text = """14 —Ñ–µ–≤—Ä–∞–ª—è –≤ 16:00 (–ø–æ –º—Å–∫) –º—ã –ø–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ü•∞

<b>"–ß–µ–º –±–æ–ª—å—à–µ –±–∏–ª–µ—Ç–æ–≤, —Ç–µ–º –±–æ–ª—å—à–µ –∏ –ø–æ–¥–∞—Ä–∫–æ–≤"</b> - –¥–µ–≤–∏–∑ —ç—Ç–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. 

–ó–∞—Ä–∞–±–æ—Ç–∞–≤ —Ö–æ—Ç—è –±—ã 1Ô∏è‚É£ –±–∏–ª–µ—Ç —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å <b>–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–∑</b> - –∫–æ–ª–ª–µ–∫—Ü–∏—é —É—á–µ–±–Ω–∏–∫–æ–≤ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –û–ì–≠/–ï–ì–≠ 2025 –≥–æ–¥–∞ üòç
 
<b>12 –Ω–∞–±–æ—Ä–æ–≤ —Å—É–ø–µ—Ä-–ø—Ä–∏–∑–æ–≤</b>, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ä–∞–∑—ã–≥—Ä–∞–µ–º —Å—Ä–µ–¥–∏ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤: 

<b>1 –º–µ—Å—Ç–æ</b> 
üèÜ –ù–∞–±–æ—Ä <u>–í–µ—á–µ—Ä–∏–Ω–∫–∞</u> üèñ
(–£–º–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ –Ø–Ω–¥–µ–∫—Å –°—Ç–∞–Ω—Ü–∏—è –õ–∞–π—Ç 2 —Å –ê–ª–∏—Å–æ–π –Ω–∞ YandexGPT) 

<b>2 –º–µ—Å—Ç–æ:</b> 
ü•à –ù–∞–±–æ—Ä <u>–û–ø—Ç–æ–≤–∏–∫</u> üíÖüèª
(—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ OZON –Ω–∞ 3000 —Ä—É–±–ª–µ–π) 

<b>3 –º–µ—Å—Ç–æ:</b> 
ü•â –ù–∞–±–æ—Ä <u>–ß–µ–ª–æ–≤–µ–∫-MAXIMUM</u> üß°
(—Ö—É–¥–∏, —á–µ—Ö–æ–ª –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω, —à–æ–ø–ø–µ—Ä —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º MAXIMUM Education) 

<b>4 –º–µ—Å—Ç–æ:</b> 
–ù–∞–±–æ—Ä <u>Chill guy</u> üòé
(–∫—Ä—É–∂–∫–∞, –±—É—Ç—ã–ª–∫–∞, —Ñ—É—Ç–±–æ–ª–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º MAXIMUM Education) 

<b>5-6 –º–µ—Å—Ç–æ:</b> 
–ù–∞–±–æ—Ä <u>–ß–µ—Ä–µ–ø–∞—à–∫–∞-–Ω–∏–Ω–¥–∑—è</u> üçïüê¢
(4 –ø–∏—Ü—Ü—ã –≤ –ø–æ–¥–∞—Ä–æ–∫) 

<b>7-8 –º–µ—Å—Ç–æ:</b> 
–ù–∞–±–æ—Ä <u>sigma</u> ü§´
(–ö–Ω–∏–≥–∞ –æ –±–∏–∑–Ω–µ—Å–µ —Å –∞–≤—Ç–æ–≥—Ä–∞—Ñ–æ–º –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ MAXIMUM Education –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –ó–Ø –Ω–∞ 1000 —Ä—É–±–ª–µ–π)

<b>9-12 –º–µ—Å—Ç–æ:</b> 
–ù–∞–±–æ—Ä <u>—Å—Ç—É–¥–µ–Ω—Ç–∞</u> ü§ì
(—Ä—É—á–∫–∞ –ú–ï + –±–ª–æ–∫–Ω–æ—Ç + –∑–Ω–∞—á–æ–∫ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä–∞)"""
    bot.send_message(
        message.chat.id, 
        prizes_text,
        parse_mode='HTML',
        reply_markup=create_main_menu_keyboard()
    )
# _____________________________________
#  –ê–ö–¢–ò–í–ù–û–°–¢–¨
# ____________________________________-


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MODERATOR_CHANNEL_ID = '@jn_hjpsuhsi'  
ACTIVITY_SCREENSHOTS_GROUP = '@jn_hjpsuhsi'  

def activity_tickets_menu(message):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω"),
        types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É")
    )
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    
    bot.send_message(
        message.chat.id, 
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def back_home(message):    
    bot.send_message(
        message.chat.id, 
        '–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?',
        reply_markup=create_main_menu_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É")
def montion_ticket(message):
    user_id = message.from_user.id
    
    if can_send_url(user_id):
       send_url_instruction(message)
    else:
        bot.send_message(
            message.chat.id, 
            "–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
            reply_markup=create_main_menu_keyboard()
        )

def can_send_url(user_id):
    with sqlite3.connect('bot_users.db') as conn:
        cursor = conn.cursor()
        today = date.today()
        
        cursor.execute('''   
            SELECT last_day_activity, montion_tickets	 
            FROM users 
            WHERE user_id = ?
        ''', (user_id,))
        
        result = cursor.fetchone()
        
        if not result:
            return False
        
        last_activity_date, montion_tickets_count = result
        
        if last_activity_date is None or last_activity_date != str(today):
            return True
         
        if montion_tickets_count >= 3:
            return False
        
    return True

def send_url_instruction(message):
    message_text = """–û—Ç–ø—Ä–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –∏–∑ —Å–≤–æ–µ–≥–æ –¢–ì-–∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –Ω–∞ reels/shorts/tt –∏ –ø–æ–ª—É—á–∞–π 5Ô∏è‚É£ –±–∏–ª–µ—Ç–æ–≤!!!

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –∑–∞ –¥–µ–Ω—å 3Ô∏è‚É£

–¢–µ–∫—Å—Ç –≤ –ø–æ—Å—Ç–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∏–º:

–í —Ñ–µ–≤—Ä–∞–ª–µ –ø—Ä–æ–π–¥–µ—Ç –∫–ª–∞—Å—Å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è": –±—É–¥—É—Ç –∫—Ä—É—Ç—ã–µ –≤—É–∑—ã –∏ –∫–æ–ª–ª–µ–¥–∂–∏üèõ, –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–πüë®üèª‚Äçüè´üë©üèº‚Äçüè´ , –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–±–Ω–∏–∫ –Ω–µ–±–æ–ª—å—à–æ–π –Ω–∞–ø–∏—Å–∞—Ç—å üíØ

–Ø —Å–∞–º –±—ã–ª –Ω–∞ –Ω–µ–º! –¢–∞–º –æ—á–µ–Ω—å –∫—Ä—É—Ç–æ! –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–º–æ–∂–µ—Ç –ø–æ–π—Ç–∏, —Ç–æ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ. 
‚úÖ–ù–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úÖ

–í—ã—Å—Ç–∞–≤–∫–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ (8-9 —Ñ–µ–≤—Ä–∞–ª—è) <a href="https://stihi.ru/2024/03/03/2963">—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>
–í—ã—Å—Ç–∞–≤–∫–∞ –≤ –ú–æ—Å–∫–≤–µ (15-16 —Ñ–µ–≤—Ä–∞–ª—è) <a href="https://stihi.ru/2024/03/03/2963">—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

<b>–î–ª—è reels/shorts/tt:</b>
‚Ä¢ –§–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º (–º–µ–º –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ, –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∑ –æ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä–µ)
‚Ä¢ –ü–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –±–∞–∑–æ–≤–æ–π —Å–∞–º–æ—Ü–µ–Ω–∑—É—Ä–µ
‚Ä¢ <b>–í–ê–ñ–ù–û:</b> —É–ø–æ–º—è–Ω—É—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã (MAXIMUM –∏ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä–∞) –≤ reels/shorts/tt, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∏–ª–µ—Ç—ã"""

    bot.send_message(
        message.chat.id,
        message_text,
        parse_mode='HTML',
        disable_web_page_preview=True
    )

    bot.register_next_step_handler(message, process_url)

def process_url(message):
    if message.content_type != 'text':
        bot.send_message(
            message.chat.id, 
            "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç/–∏—Å—Ç–æ—Ä–∏—é/—à–æ—Ä—Ç!"
        )
        return
    valid_domains = [
        'vk.com','t.me','telegram.me','youtube.com', 'instagram.com'
    ]

    text = message.text.lower()
    is_valid_url = any(domain in text for domain in valid_domains)

    if not is_valid_url:
        bot.send_message(
            message.chat.id,
            "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ –í–ö/Telegram –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ!",
        )
        
        return
   
    markup = types.InlineKeyboardMarkup()
    approve_btn = types.InlineKeyboardButton(
        "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", 
        callback_data=f"url_approve_{message.from_user.id}"
    )
    reject_btn = types.InlineKeyboardButton(
        "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
        callback_data=f"url_reject_{message.from_user.id}"
    )
    markup.row(approve_btn, reject_btn)

    bot.forward_message(
        MODERATOR_CHANNEL_ID, 
        message.chat.id, 
        message.message_id
    )

    bot.send_message(
        MODERATOR_CHANNEL_ID, 
        f"–ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {message.from_user.id}",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('url_'))
def handle_url_moderation(call):
    action, user_id = call.data.split('_')[1:]
    user_id = int(user_id)
    
    if action == 'approve':
        if update_montion_tickets(user_id):
            bot.send_message(
                user_id, 
                "‚úÖ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ù–∞—á–∏—Å–ª–µ–Ω–æ 5 –±–∏–ª–µ—Ç–æ–≤."
            )
            update_user_tickets(user_id, tickets_to_add=5)
        else:
            bot.send_message(
                user_id, 
                "‚úÖ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –Ω–æ –ª–∏–º–∏—Ç –±–∏–ª–µ—Ç–æ–≤ –∑–∞ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω."
            )
    
    elif action == 'reject':
        bot.send_message(
            user_id, 
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. " +
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        )

    bot.delete_message(
        call.message.chat.id, 
        call.message.message_id
    )

def update_montion_tickets(user_id):
    with sqlite3.connect('bot_users.db') as conn:
        cursor = conn.cursor()
        today = date.today()
        
        cursor.execute('''   
            SELECT last_day_activity, montion_tickets	 
            FROM users 
            WHERE user_id = ?
        ''', (user_id,))
        
        result = cursor.fetchone()
        
        if not result:
            return False
        
        last_activity_date, montion_tickets_count = result
        if last_activity_date is None or last_activity_date != str(today):
            cursor.execute('''
                UPDATE users 
                SET last_day_activity = ?,
                    montion_tickets = 1
                WHERE user_id = ?
            ''', (today, user_id))

        elif montion_tickets_count < 3:
            cursor.execute('''
                UPDATE users 
                SET montion_tickets = montion_tickets + 1  
                WHERE user_id = ?
            ''', (user_id,))
        else:
            return False
        
        conn.commit()
        return True
    
@bot.message_handler(func=lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω")
def post_ticket(message):
    user_id = message.from_user.id
    
    if can_send_screenshot(user_id):
       send_screenshot_instruction(message)
    else:
        bot.send_message(
            message.chat.id, 
            "–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
            reply_markup=create_main_menu_keyboard()
        )

def can_send_screenshot(user_id):
    with sqlite3.connect('bot_users.db') as conn:
        cursor = conn.cursor()
        today = date.today()
        
        cursor.execute('''   
            SELECT last_day_activity, post_tickets	 
            FROM users 
            WHERE user_id = ?
        ''', (user_id,))
        
        result = cursor.fetchone()
        
        if not result:
            return False
        
        last_activity_date, post_tickets_count = result
        
        if last_activity_date is None or last_activity_date != str(today):
            return True
         
        if post_tickets_count >= 5:
            return False
        
    return True

def send_screenshot_instruction(message):
    message_text = """–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç—ã —Å –¥—Ä—É–∑—å—è–º–∏/–æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π 3Ô∏è‚É£ –±–∏–ª–µ—Ç–∞! 

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –¥–µ–Ω—å 5Ô∏è‚É£ 

–î–µ—Ä–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:

–ü—Ä–∏–≤–µ—Ç! 
–í —Ñ–µ–≤—Ä–∞–ª–µ –ø—Ä–æ–π–¥–µ—Ç –∫–ª–∞—Å—Å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è": –±—É–¥—É—Ç –∫—Ä—É—Ç—ã–µ –≤—É–∑—ã –∏ –∫–æ–ª–ª–µ–¥–∂–∏üèõ, –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–πüë®üèª‚Äçüè´üë©üèº‚Äçüè´ , –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–±–Ω–∏–∫ –Ω–µ–±–æ–ª—å—à–æ–π –Ω–∞–ø–∏—Å–∞—Ç—å üíØ

–Ø —Å–∞–º –±—ã–ª –Ω–∞ –Ω–µ–º! –¢–∞–º –æ—á–µ–Ω—å –∫—Ä—É—Ç–æ! –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–º–æ–∂–µ—Ç –ø–æ–π—Ç–∏, —Ç–æ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ. 
    ‚úÖ–ù–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úÖ

–í—ã—Å—Ç–∞–≤–∫–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ (8-9 —Ñ–µ–≤—Ä–∞–ª—è) <a href="https://stihi.ru/2024/03/03/2963">—Å—Å—ã–ª–∫–∞</a>
–í—ã—Å—Ç–∞–≤–∫–∞ –≤ –ú–æ—Å–∫–≤–µ (15-16 —Ñ–µ–≤—Ä–∞–ª—è) <a href="https://stihi.ru/2024/03/03/2963">—Å—Å—ã–ª–∫–∞</a>
    ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚úÖ—á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
‚úÖ–≤–∏–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏"""

    bot.send_message(
        message.chat.id,
        message_text,
        parse_mode='HTML',
        disable_web_page_preview=True
    )
    bot.register_next_step_handler(message, process_screenshot)

def process_screenshot(message):
    if message.content_type != 'photo' and not (message.content_type == 'document'
         and message.document.mime_type in ['image/jpeg', 'image/png']):
        bot.send_message(
            message.chat.id, 
            "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!"
        )
        return 
   
    markup = types.InlineKeyboardMarkup()
    approve_btn = types.InlineKeyboardButton(
        "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", 
        callback_data=f"screenshot_approve_{message.from_user.id}"
    )
    reject_btn = types.InlineKeyboardButton(
        "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
        callback_data=f"screenshot_reject_{message.from_user.id}"
    )
    markup.row(approve_btn, reject_btn)

    bot.forward_message(
        MODERATOR_CHANNEL_ID, 
        message.chat.id, 
        message.message_id
    )

    bot.send_message(
        MODERATOR_CHANNEL_ID, 
        f"–ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {message.from_user.id}",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('screenshot_'))
def handle_screenshot_moderation(call):
    action, user_id = call.data.split('_')[1:]
    user_id = int(user_id)
    
    if action == 'approve':
        if update_post_tickets(user_id):
            bot.send_message(
                user_id, 
                "‚úÖ –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–¥–æ–±—Ä–µ–Ω! –ù–∞—á–∏—Å–ª–µ–Ω–æ 3 –±–∏–ª–µ—Ç–∞."
            )
            update_user_tickets(user_id, tickets_to_add=3)
        else:
            bot.send_message(
                user_id, 
                "‚úÖ –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–¥–æ–±—Ä–µ–Ω, –Ω–æ –ª–∏–º–∏—Ç –±–∏–ª–µ—Ç–æ–≤ –∑–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω."
            )
    
    elif action == 'reject':
        bot.send_message(
            user_id, 
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é. " +
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        )

    bot.delete_message(
        call.message.chat.id, 
        call.message.message_id
    )

def update_post_tickets(user_id):
    with sqlite3.connect('bot_users.db') as conn:
        cursor = conn.cursor()
        today = date.today()
        
        cursor.execute('''   
            SELECT last_day_activity, post_tickets	 
            FROM users 
            WHERE user_id = ?
        ''', (user_id,))
        
        result = cursor.fetchone()
        
        if not result:
            return False
        
        last_activity_date, post_tickets_count = result
        if last_activity_date is None or last_activity_date != str(today):
            cursor.execute('''
                UPDATE users 
                SET last_day_activity = ?,
                    post_tickets = 1
                WHERE user_id = ?
            ''', (today, user_id))
            print ( '—Ö—É–π')

        elif post_tickets_count < 5:
            cursor.execute('''
                UPDATE users 
                SET post_tickets = post_tickets + 1  
                WHERE user_id = ?
            ''', (user_id,))
        else:
            return False
        
        conn.commit()
        return True


@bot.message_handler(func=lambda message: message.text == "–ë–∏–ª–µ—Ç—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
def activity_tickets(message):
    activity_tickets_menu(message)


bot.session_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    create_users_table()
    
    if check_user_exists(message.from_user.id):
        user = get_user_by_id(message.from_user.id)
        bot.send_message(
            message.chat.id, 
            f"–ü—Ä–∏–≤–µ—Ç, {user[3]}!",
            reply_markup=create_main_menu_keyboard()
        )
    else:
        create_registration_form(message)

          
bot.polling(none_stop=True)